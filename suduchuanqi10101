------------------速度传奇------------------

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

Rayfield:Notify({
   Title = "执行成功",
   Content = "谢谢使用土脚本",
   Duration = 3.5,
   Image = "bell",
})

local Window = Rayfield:CreateWindow({
   Name = "土脚本速度传奇 1.0",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "土脚本执行成功",
   LoadingSubtitle = "by 土",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "tu Hub"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "AH5H6vFATq", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "土脚本",
      Subtitle = "Key 系统",
      Note = "加入dc群或企鹅群获取key dc=AH5H6vFATq 企鹅=1042414089", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"zzxnbnb123"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("主要", "user-round")
local Toggle = Tab:CreateToggle({
    Name = "自动收集宝石",  -- 显示的名称
    CurrentValue = false,  -- 默认关闭
    Flag = "AutoCollectGems",  -- 唯一标识符
    Callback = function(Value)
        -- 当Toggle状态改变时，这个函数会被调用
        _G.AutoCollectGems = Value  -- 使用全局变量存储状态
        
        -- 自动收集循环
        if Value then
            -- 如果开启，启动收集循环
            _G.CollectLoop = coroutine.create(function()
                while _G.AutoCollectGems do
                    local args = {
                        [1] = "collectOrb",
                        [2] = "Gem",
                        [3] = "City"
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
                    wait()  -- 防止游戏卡顿
                end
            end)
            coroutine.resume(_G.CollectLoop)
        else
            -- 如果关闭，停止收集循环
            if _G.CollectLoop then
                coroutine.close(_G.CollectLoop)
            end
        end
    end,
})

-- 自动收集红宝石（Red Orb）的 Toggle
local Toggle = Tab:CreateToggle({
    Name = "自动收集红球",  -- 显示的名称
    CurrentValue = false,  -- 默认关闭
    Flag = "AutoCollectRedOrb",  -- 唯一标识符
    Callback = function(Value)
        _G.AutoCollectRedOrb = Value  -- 全局变量存储状态
        
        if Value then
            -- 如果开启，启动收集循环
            _G.RedOrbLoop = coroutine.create(function()
                while _G.AutoCollectRedOrb do
                    local args = {
                        [1] = "collectOrb",
                        [2] = "Red Orb",  -- 注意：这里改成 "Red Orb"
                        [3] = "City"
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
                     wait() -- 防止游戏卡顿
                end
            end)
            coroutine.resume(_G.RedOrbLoop)
        else
            -- 如果关闭，停止收集循环
            if _G.RedOrbLoop then
                coroutine.close(_G.RedOrbLoop)
            end
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "自动重生",  -- 显示的名称
    CurrentValue = false,  -- 默认关闭
    Flag = "AutoRebirthToggle",  -- 唯一标识符
    Callback = function(Value)
        _G.AutoRebirthEnabled = Value  -- 全局变量存储状态
        
        if Value then
            -- 如果开启，启动自动转生循环
            _G.RebirthLoop = coroutine.create(function()
                while _G.AutoRebirthEnabled do
                    local args = {
                        [1] = "rebirthRequest"
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthEvent"):FireServer(unpack(args))
                    
                    wait(0.5)  -- 添加短暂延迟防止服务器拒绝高频请求
                end
            end)
            coroutine.resume(_G.RebirthLoop)
        else
            -- 如果关闭，停止自动转生循环
            if _G.RebirthLoop then
                coroutine.close(_G.RebirthLoop)
            end
        end
    end,
})

local AutoRedOrbButton = Tab:CreateButton({
   Name = "自动收集红球(可叠加)",
   Callback = function()
   _G.Aotohongqiu = true
   while wait() do
   local args = {
    [1] = "collectOrb",
    [2] = "Red Orb",
    [3] = "City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
end
   end,
})

local AutobaoshiButton = Tab:CreateButton({
   Name = "自动收集宝石(可叠加)",
   Callback = function()
   while wait() do
   local args = {
    [1] = "collectOrb",
    [2] = "Gem",
    [3] = "City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
end
   end,
})
end
